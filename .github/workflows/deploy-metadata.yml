name: Deploy Metadata Service

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - dev
          - staging
          - prod
        default: 'dev'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x

    - name: Restore dependencies
      run: dotnet restore rpg-character-service/rpg-character-service.sln

    - name: Build
      run: dotnet build rpg-character-service/rpg-character-service.sln --no-restore

    - name: Test
      run: dotnet test rpg-character-service/rpg-character-service.sln --filter:"FullyQualifiedName!~Integration"

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
    - uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.7.0"

    - name: Terraform Init
      working-directory: ./infra/terraform
      run: terraform init

    - name: Get AWS region from Terraform
      id: terraform-region
      working-directory: ./infra/terraform
      run: echo "region=$(terraform output -raw region)" >> $GITHUB_OUTPUT

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-role
        aws-region: ${{ steps.terraform-region.outputs.region }}
        role-session-name: GitHubActionsSession

    - name: Get ECR repository URL from Terraform
      id: terraform-repo
      working-directory: ./infra/terraform
      run: echo "repository_url=$(terraform output -raw metadata_repository_url)" >> $GITHUB_OUTPUT

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
        ECR_REPOSITORY: ${{ steps.terraform-repo.outputs.repository_url }}
      run: |
        docker build --platform linux/amd64 -t $ECR_REPOSITORY:$IMAGE_TAG -f infra/docker/metadata.Dockerfile .
        docker push $ECR_REPOSITORY:$IMAGE_TAG
        docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REPOSITORY:latest
        docker push $ECR_REPOSITORY:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
    - uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.7.0"

    - name: Get AWS region from Terraform
      id: terraform-region
      working-directory: ./infra/terraform
      run: echo "region=$(terraform output -raw region)" >> $GITHUB_OUTPUT

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-role
        aws-region: ${{ steps.terraform-region.outputs.region }}
        role-session-name: GitHubActionsSession

    - name: Terraform Init
      working-directory: ./infra/terraform
      run: terraform init

    - name: Terraform Apply
      working-directory: ./infra/terraform
      run: terraform apply -auto-approve -var="environment=${{ github.event.inputs.environment }}"
